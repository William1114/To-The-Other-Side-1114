import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.geom.*;
import javax.imageio.*;
import java.io.*;
import java.awt.image.BufferedImage.*;
import java.awt.event.*;

/*
 *    Entity discribes all the spaces on the game board in which a
 * tower, enemy or projectile can or do exist.
 * 
 *    Towers and enemies are both entities, and their data is stored
 * as the tile that they are on.
 * 
 *    Chickens and projectiles appear to move across the tiles but 
 * the projectiles are not their own class and only exist as graphics,
 * chickens only move from tile to tile.
 */


class Entity extends JPanel
{
  static int wide = 100;
  static int high = 75;
  //Width and height of each space
  static int tGap = 200;
  static int lGap = 100;
  //Gaps at the top and left of the screen
  int hp = 1;
  int id = 0;
  //id is the type of tower or enemy being represented on the tile
  int cooldown = 0;
  int reCooldown = 0;
  //cooldown is the amount of times between attacks and, for enemies, the amount of time to travel between tiles
  int strength = 0;
  //strength is the amount of damage done when the tower or enemy attacks
  int x;
  int y;
  //the X and Y co-ordinates of the tile relative to other tiles
  int z;
  // the Z co-ordinate allows multiple entities to be on each tile.
  // The towers all have a Z co-ordinate of 0 while enemies are 1 and higher
  int target = 0;
  // the X co-ordinate of a targeted enemy
  int deathX = 0;
  // the X co-ordinate an enemy is defeated at
  boolean selected;
  boolean attack = false;
  boolean dead = false;
  //booleans whether the tile is selected, attacking or defeated.
  static Images gphx = new Images();
  
  
  public Entity(int gx,int gy, int gz)
  {
    x = gx;
    y = gy;
    z = gz;
  }
  
  public boolean getAttack()
  {
   return attack;
  }
  
  public void setAttack(boolean atk, int trgt)
  {
   attack = atk;
   target = trgt;
  }
  
  public int getID()
  {
    return id;
  }
  
  public void destroy()
  {
    id = 0;
    hp = 0;
    cooldown = 0;
    reCooldown = 0;
    strength = 0;
    dead = false;
    //Resets entities stats to an empty tile
  }
  
  public boolean getDead()
  {
   return dead; 
  }
  
  public boolean getSelected()
  {
   return selected; 
  }
  
  public void setValues(int ghp, int cd, int str, int gid)
  {
    attack = false;
    id = gid;
    hp = ghp;
    cooldown = cd;
    reCooldown = cd;
    strength = str;
    dead = false;
    if (id > 9)
      selected = false;
    //Sets the Entities values.
  }
  
  public void reCool()
  {
    reCooldown = cooldown;
  }
  
  public void attacked(int damage)
  {
    hp = hp - damage;
    if (hp <= 0)
    {
      if (!dead)
      {
        deathX = x*wide+lGap+z*10+(((int)(wide/cooldown))*(reCooldown));
        cooldown = cooldown*2;
        reCooldown = cooldown;
        dead = true;
      }
    }
    //deals damage to entity and kills enemy if hp <= 0
  }
  
  public static int getRange(int idN)
  {
    if (idN == 0 || (idN>=6&&idN<=8))
      return 0;
    
    if (idN == 5)
      return 1;
    
    if (idN == 4)
      return 5;
    
    if (idN == 1 || idN == 3 || idN == 2)
      return 8;
    
    return 1;
    
  }
  
  
  
  
  
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~draw Methods~I~~
  //                                      V
  
  
  
  
  public void drawGrid(Graphics g, int cx, int cy, boolean clk)
  {   
    if (z == 0 && x != 8)
    {
      //Draws the tiles that towers can be placed on
      g.setColor(Color.gray);
      if ((cx>x*wide+lGap)&&(cx<=x*wide+wide+lGap)&&(cy>y*high+tGap)&&(cy<=y*high+high+tGap))
      {
        if (clk)
        {
          selected = true;
        }
        if (selected)
          g.setColor(Color.darkGray);
        else
          g.setColor(Color.lightGray);
      }
      else
      {
       if (clk)
          selected = false;
       if (selected)
          g.setColor(Color.darkGray);
      }
      //Sets colour of tile if the mouse is hovering over the tile or ckicking tower
      g.fillRect(x*wide+lGap, y*high+tGap, wide, high);
      
      g.setColor(Color.darkGray);
      g.drawLine(x*wide+lGap, y*high+tGap, x*wide+wide+lGap, y*high+tGap);
      g.drawLine(x*wide+lGap, y*high+tGap, x*wide+lGap, y*high+high+tGap);
      //Draws the grid between tiles
    }
    
    if (id > 0)
    {
      if (reCooldown == 0)
      {
        if (dead)
          destroy();
        //destroys dead entities
        else
        {
          if (!(id>=6&&id<=8))
          GBoard.attack(x, y, z, hp, cooldown, strength, id, g);
          //if cooldown  is at 0 entity tries to attack
        }
      }
      else
      {
        reCooldown--;
      }
    }
  }
  
  public void drawEntt(Graphics g, int cx, int cy, boolean clk)
  {
    if (id > 0 && id < 10)
    {
      if (id == 1)
      {
        g.setColor(Color.red);
      }
      
      if (id == 2)
      {
        g.setColor(Color.orange);
      }
      
      if (id == 3)
      {
        g.setColor(Color.black);
      }
      
      if (id == 4)
      {
        g.setColor(Color.black);
      }
      
      if (id == 5)
      {
        g.setColor(Color.white);
      }
      
      if (id == 6)
      {
        g.setColor(Color.red);
      }
      
      if (id == 7)
      {
        g.setColor(Color.magenta);
      }
      
      if (id == 8)
      {
        g.setColor(Color.white);
      }
      
      if (reCooldown == 0&&!(id>=6&&id<=8))
        g.setColor(Color.yellow);
      
      //Temporary code defining colours of towers until graphics are made
      
      g.fillRect(x*wide+lGap, y*high+tGap, wide, high);
    }
    if (id > 9)
    {
      if (attack)
        g.drawImage(gphx.getImage(id,cooldown,reCooldown,attack,dead),  x*wide+lGap+z*10,  y*high+tGap+z*10+10,  null);
      //draws attacking enemy
      if (dead)
        g.drawImage(gphx.getImage(id,cooldown,reCooldown,attack,dead),  deathX,  y*high+tGap+z*10+10,  null);
      //draws "popping" chicken
      if (!(attack||dead))
        g.drawImage(gphx.getImage(id,cooldown,reCooldown,attack,dead),  x*wide+lGap+z*10+(((int)(wide/cooldown))*(reCooldown)),  y*high+tGap+z*10+10,  null);
      //draws moving chicken
    }
    else
    {
      if (attack && cooldown > 0)
      {
        g.setColor(Color.black);
        g.drawRect(x*wide+lGap+((((target*wide+lGap+(wide/4)) - (x*wide+lGap))/cooldown)*(cooldown - reCooldown)) ,y*high+tGap+10 ,30,  30);
        //draws projectile
      }
    }
  }
  
}
